#
#  ------------------------------------------------------------------------------
#  Author: Craig Lage, UC Davis
#  Date: Sep 3, 2015
#
#  Standalone cpp Poisson solver
#
#
# Poisson Solver configuration file

VerboseLevel = 2  # 0 - minimal output, 1 - normal, 2 - more verbose.

# Poisson solver constants
# These control the numerics of the Poisson solver
# They should not need to be changed
w = 1.8 			# Successive Over-Relaxation factor
ncycle = 64			# Number of smoothing cycles at finest resolution
ncycle_loop = 16		# Number of smoothing cycles in repeated loops
iterations = 1			# Number of VCycles
NZExp = 10.0                    # Non-linear Z-axis slope at z=0
      				# A value of 1.0 makes the z-axis linear
				# A value of 10.0 gives a 10X magnification at z=0
				# A value of 10.0 is recommended.
#  ------------------------------------------------------------------------------
# Overall setup - these control the size and scale of the simulated volume

ScaleFactor = 2    	   	# Power of 2 that sets the grid size
# ScaleFactor = 1 means grid size is 0.625 micron, 160 grids in the z-direction
# ScaleFactor = 2 cuts grid size by a factor of 2
# ScaleFactor = 4 cuts grid size by a factor of 4, etc.
SensorThickness = 100.0         # Sensor thickness in microns
PixelSize = 10.0  	     	# Pixel size in microns
GridsPerPixel = 16		# Number of grids per pixel at ScaleFactor = 1
Nx = 160      			# Number of grids in x at ScaleFactor = 1 (Must be a multiple of 32)
Ny = 160      			# Number of grids in y at ScaleFactor = 1 (Must be a multiple of 32)
Nz = 160      			# Number of grids in z at ScaleFactor = 1 (Must be a multiple of 32)
Nzelec = 20      		# Number of grids in z in electron and hole arrays at ScaleFactor = 1 
XBCType = 1			# Set X direction boundary conditions: 0 - Free (Eperp = 0), 1 - Periodic
YBCType = 1			# Set Y direction boundary conditions: 0 - Free (Eperp = 0), 1 - Periodic
SimulationRegionLowerLeft = 5.0 5.0	  # Allows adjustment of X, Y coordinates
			    	# The value of (5.0, 5.0) centers the PixelBoundaryRegion
				# in the SimulationRegion
#  ------------------------------------------------------------------------------

# Voltages and Charges - these should be self-explanatory
Vbb = -60.0			# Back bias
Vparallel_lo = -8.0		# Parallel Low Voltage
Vparallel_hi = 4.0		# Parallel High Voltage
Vserial_lo = -4.0		# Serial Low Voltage
Vserial_hi = 6.0		# Serial High Voltage
Vscupper = 19.0 		# Scupper voltage
GateOxide = 0.05                # Gate Oxide thickness in microns
FieldOxide = 1.0                # Field Oxide thickness in microns
FieldOxideTaper = 1.2            # Field Oxide taper width in microns
CollectingPhases = 2            # 1=One Parallel gate High, 2=Two Parallel gates High
BackgroundDoping = -1.0E12 	# Background doping in cm^-3
ChannelStopDoping = -2.0E12
ChannelStopProfile = 0		# 0 = Square profile, 1 = Gaussian profile
ChannelStopDepth = 2.0
ChannelStopWidth = 2.0
ChannelDoping = 1.4E12
ChannelProfile = 1		# 0 = Square profile, 1 = Gaussian profile
ChannelDepth = 0.38
ChannelPeak = 0.05
ChannelStopPeak = 0.0

qfh = 0.4
#  ------------------------------------------------------------------------------
# Pixel Regions - This is set up for a 9x9 "postage stamp"
# These allow one to set up one or more regions of regularly spaced pixels.
# Each pixel region will need its extents defined
# Within each pixel region, one can fill multiple collecting wells with arbitrary amounts of charge
NumberofPixelRegions = 1	  	  # 1
PixelRegionLowerLeft_0 = 0.0 0.0	  #
PixelRegionUpperRight_0 = 110.0 110.0	  #
NumberofFilledWells_0 = 0		  #
CollectedCharge_0_0 = 	80000		  # Collected charge in e-
FilledPixelCoords_0_0 = 75.0 75.0	  # (x,y) coords of pixel center

BuildQFeLookup = 0
NQFe = 81
QFemin = 6.0
QFemax = 16.0


#  ------------------------------------------------------------------------------
# Constant Voltage Regions - this allows a number of regions of fixed surface potential
# Each Constant Voltage region will need its extents defined
NumberofFixedRegions = 0

#  ------------------------------------------------------------------------------
# Pixel Boundary Tests - This allows tracing the pixel boundaries and electron paths

ElectronZ0Area = 95.0      	      	   # Starting z value of electron for Area/Vertex plots. 100.0 is at the incident light
	     				   # surface.
LogEField = 1	 	       	      	   # 0 - don't calculate E-Field, 1 - Calculate and store E-Field
LogPixelPaths = 0			   # 0 - only the final (z~0) point is logged, 1 - Entire path is logged
PixelAreas = 20				   # -1 - Don't calculate areas, N - calculate areas every nth step
NumVertices = 8 			   # Number of vertices per side for the pixel area calculation.
	      				   # Since there are also 4 corners, there will be:
					   # (4 * NumVertices + 4) vertices in each pixel

PixelBoundaryTestType = 3		   # 0 - Run a grid of equally spaced electrons,
		      			   # 1 - Run a random set of electrons with a Gaussian pattern
					   # 2 - Run a random set of electrons inside PixelBoundary
					   # 3 - Read a list of photons from a file
					   # 4 - Same as 2, but accumulate the charge
PhotonList = bf_1_nx_0_ny_0_photon_file.dat

#  ------------------------------------------------------------------------------
# This defines the parameters for the Random Gaussian which fills the wells
ElectronZ0Fill = 95.0      	      	   # Starting z value of electron for filling. 100.0 is at the incident light
PixelBoundaryLowerLeft = 10.0 10.0
PixelBoundaryUpperRight = 100.0 100.0

PixelBoundaryNx = 9	   	      	      	 # Number of pixels in postage stamp
PixelBoundaryNy = 9	   	      	      	 # Number of pixels in postage stamp

Sigmax = 10.0					 # Sigma of incoming light profile
Sigmay = 10.0					 # Sigma of incoming light profile
Xoffset = 0.0
Yoffset = 0.0

NumElec = 10000					 # Number of electrons to be traced between field recalculation
	  					 # Also used if PixelBoundaryTestType = 2
NumSteps = 21					 # Number of steps, each one adding NumElec electrons


CCDTemperature = 173.0			   # Temp in Degrees K.  Used to calculate diffusion steps.

DiffMultiplier = 1.0			   # Used to adjust the amount of diffusion.
       	 				   # A value of 1.0 gives the theoretical amount of diffusion
					   # A value of 0.0 turns off diffusion completely
EquilibrateSteps = 100			   # Number of diffusion steps each electron takes after reaching the bottom,
					   # and before beginning to log the charge.
BottomSteps = 1000			   # Number of diffusion steps each electron takes while logging final charge location					   
ElectronAccumulation = 0    		   # Determines how electrons are accumulated. 0=Old method; 1=QFe
NumDiffSteps = 1			   # A speed/accuracy trade-off. A value of 1 uses the theoretical diffusion
	       				   # step.  A higher value takes larger steps. I have done a few tests
					   # but I recommend using a value of 1 unless you test larger values.
SaturationModel = 0			   # Saturation Model 1=On, 0=Off; Experimental!
# The parameters below would be used if PixelBoundaryTestType = 0
PixelBoundaryStepSize = 0.2 0.2

#  ------------------------------------------------------------------------------
# These control the location and naming of the output
outputfiledir 	= data/read_run2
outputfilebase 	= BF_256_9x9
EdgePlot = 0				# Tells plot program whether it is the edge of the array
PlotEField = 0				# Tells plot program whether or not to plot E-field in Summary plot.
SaveData = 1 				# 0 - Save only Pts data, N - Save all data every Nth step
SaveElec = 1 				# 0 - Save only Pts data, N - Save Elec data every Nth step
#  ------------------------------------------------------------------------------
# These control the continuation
Continuation = 0			# Use this to continue an existing simulation and read inwhere you left off
	       				# 0 - No continuation
					# 1 Continue at step LastContinuationStep
LastContinuationStep = 0
